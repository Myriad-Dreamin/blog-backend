---
import type { DistributionPoints } from "./Summary.astro";

export interface Props {
  data: DistributionPoints;
  domains?: Map<number, Record<string, number>>;
  title: string;
  period: string;
  gran: number;
}

const { data: raw, domains, title, period, gran }: Props = Astro.props;

const subDomain = (ts: number) => {
  if (!domains) {
    return "";
  }
  const res = domains.get(ts);
  if (!res) {
    return "";
  }
  const results = [];
  for (const [domain, count] of Object.entries(res)) {
    results.push(`\n${domain}: ${count}`);
  }
  return results.length > 0 ? results.join("\n") : "";
};

const data = raw.map((d) => [d[0], d[1], subDomain(d[0])]);
---

<script src="https://d3js.org/d3.v6.js"></script>
<style is:global>
  .d3-chart {
    margin: 4em;
  }
  .d3-chart-svg {
    overflow: visible;
  }
  .tooltip {
    pointer-events: none;
    font-size: 10;
  }
</style>
<div class="d3-chart">
  <script define:vars={{ data, title, period, gran }}>
    const parent = document.currentScript.parentElement;

    document.addEventListener("DOMContentLoaded", function () {
      const width = parent.clientWidth;
      const height = 300;

      const d3 = window.d3;

      const svg = d3
        .select(parent)
        .append("svg")
        .attr("class", "d3-chart-svg")
        .attr("width", width)
        .attr("height", height)
        .attr("viewBox", `0 0 ${width} ${height}`);

      const xLeft = Math.min(...data.map((d) => d[0]));
      const xRight = Math.max(...data.map((d) => d[0]));
      console.log("X Scale Range:", xLeft, xRight);
      const xScale = d3
        .scaleTime()
        .domain([new Date(xLeft * 1000), new Date(xRight * 1000)])
        .range([0, width]);
      const yScale = d3
        .scaleLinear()
        .domain([0, d3.max(data, (d) => d[1])])
        .range([height, 0]);
      const line = d3
        .line()
        .x((d) => xScale(new Date(d[0] * 1000)))
        .y((d) => yScale(d[1]));
      const xAxis = d3.axisBottom(xScale).ticks(5);
      const yAxis = d3.axisLeft(yScale).ticks(5);
      const xAxisGroup = svg
        .append("g")
        .attr("class", "x-axis")
        .attr("transform", `translate(0, ${height})`)
        .call(xAxis);
      const yAxisGroup = svg.append("g").attr("class", "y-axis").call(yAxis);
      svg
        .append("path")
        .datum(data)
        .attr("class", "line")
        .attr("d", line)
        .attr("fill", "none")
        .attr("stroke", "#29b7cb")
        .attr("stroke-width", 2);
      svg
        .selectAll(".dot")
        .data(data)
        .enter()
        .append("circle")
        .attr("class", "dot")
        .attr("cx", (d) => xScale(new Date(d[0] * 1000)))
        .attr("cy", (d) => yScale(d[1]))
        .attr("r", 3)
        .attr("fill", "#ff6f61")
        // on hover
        .on("mouseover", function (event, d) {
          d3.select(this)
            .transition()
            .duration(200)
            .attr("r", 5)
            .attr("fill", "#ff6f61");
          /**
           *
           * @param svg {import("d3").Selection<SVGSVGElement, unknown, null, undefined>}
           * @param text {string}
           */
          const splitText = (svg, text) => {
            const lines = text.split("\n").filter((line) => line.trim() !== "");
            if (lines.length <= 1) {
              svg
                .append("text")
                .attr("class", "tooltip")
                .attr("fill", "white")
                .attr("x", xScale(new Date(d[0] * 1000)))
                .attr("y", yScale(d[1]) - 10)
                .attr("text-anchor", "middle")
                .text(text);
              return; // No need to split if there's only one line
            }
            const lineHeight = 15; // Adjust as needed
            const textGroup = svg.append("g").attr("class", "tooltip");
            lines.forEach((line, index) => {
              textGroup
                .append("text")
                .attr("fill", "white")
                .attr("x", xScale(new Date(d[0] * 1000)))
                .attr("y", yScale(d[1]) - 10 + index * lineHeight)
                .attr("text-anchor", "middle")
                .text(line);
            });
          };
          splitText(
            svg,
            `${d[1]} at ${new Date(d[0] * 1000).toLocaleString()}${d[2] || ""}`
          );
        })
        .on("mouseout", function (event, d) {
          d3.select(this)
            .transition()
            .duration(200)
            .attr("r", 3)
            .attr("fill", "#ff6f61");
          svg.selectAll(".tooltip").remove();
        })
        .on("click", function (event, d) {
          // Handle click event if needed
          console.log("Clicked on data point:", d);

          // json-line-timestamp
          const firstTimestampLessThanD0 =
            document.querySelectorAll(`.json-line-timestamp`);

          const d0 = d[0] + gran;
          for (const el of firstTimestampLessThanD0) {
            const compared = el.getAttribute("data-timestamp");
            if (compared && parseInt(compared, 10) <= d0) {
              el.scrollIntoView({ behavior: "smooth", block: "center" });
              break; // Stop after the first match
            }
          }
        });
      svg
        .append("text")
        .attr("x", width - 10)
        .attr("y", height - 10)
        .attr("text-anchor", "end")
        .style("font-size", "0.8em")
        .style("fill", "#e0e0e0")
        .text(`Period: ${period}`);
      xAxisGroup
        .selectAll("text")
        .style("fill", "#e0e0e0")
        .style("font-size", "0.8em");
      yAxisGroup
        .selectAll("text")
        .style("fill", "#e0e0e0")
        .style("font-size", "0.8em");
      svg
        .selectAll(".line")
        .style("stroke", "#29b7cb")
        .style("stroke-width", "2px");
      svg
        .selectAll(".dot")
        .style("fill", "#ff6f61")
        .style("stroke", "#e0e0e0")
        .style("stroke-width", "1px");
      svg.selectAll(".x-axis path, .y-axis path").style("stroke", "#e0e0e0");
      svg
        .selectAll(".x-axis line, .y-axis line")
        .style("stroke", "#e0e0e0")
        .style("stroke-width", "1px");
      svg
        .selectAll(".x-axis text, .y-axis text")
        .style("fill", "#e0e0e0")
        .style("font-size", "0.8em");
      svg
        .selectAll(".x-axis path, .y-axis path")
        .style("fill", "none")
        .style("stroke", "#e0e0e0");
      svg
        .selectAll(".x-axis line, .y-axis line")
        .style("stroke", "#e0e0e0")
        .style("stroke-width", "1px");
      svg
        .selectAll(".x-axis text, .y-axis text")
        .style("fill", "#e0e0e0")
        .style("font-size", "0.8em");
    });
  </script>
</div>
